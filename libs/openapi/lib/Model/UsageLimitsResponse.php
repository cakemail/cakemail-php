<?php
/**
 * UsageLimitsResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cakemail\Lib
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cakemail API
 *
 * The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.
 *
 * The version of the OpenAPI document: 1.12.11
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cakemail\Lib\Model;

use \ArrayAccess;
use \Cakemail\Lib\ObjectSerializer;

/**
 * UsageLimitsResponse Class Doc Comment
 *
 * @category Class
 * @package  Cakemail\Lib
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UsageLimitsResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UsageLimitsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'starts_on' => 'int',
        'per_campaign' => 'int',
        'per_month' => 'int',
        'maximum_contacts' => 'int',
        'lists' => 'int',
        'users' => 'int',
        'campaign_blueprints' => 'int',
        'automation_conditions' => 'int',
        'use_campaign_blueprints' => 'bool',
        'use_ab_split' => 'bool',
        'use_automation_conditions' => 'bool',
        'use_automation_customwebhooks' => 'bool',
        'use_html_editor' => 'bool',
        'use_contact_export' => 'bool',
        'use_custom_merge_tags' => 'bool',
        'use_list_redirection' => 'bool',
        'use_behavioral_segmentation' => 'bool',
        'use_smart_email_resource' => 'bool',
        'use_smart_blueprint' => 'bool',
        'use_brand' => 'bool',
        'use_tags_in_automation' => 'bool',
        'use_tags' => 'bool',
        'insert_reseller_logo' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'starts_on' => null,
        'per_campaign' => null,
        'per_month' => null,
        'maximum_contacts' => null,
        'lists' => null,
        'users' => null,
        'campaign_blueprints' => null,
        'automation_conditions' => null,
        'use_campaign_blueprints' => null,
        'use_ab_split' => null,
        'use_automation_conditions' => null,
        'use_automation_customwebhooks' => null,
        'use_html_editor' => null,
        'use_contact_export' => null,
        'use_custom_merge_tags' => null,
        'use_list_redirection' => null,
        'use_behavioral_segmentation' => null,
        'use_smart_email_resource' => null,
        'use_smart_blueprint' => null,
        'use_brand' => null,
        'use_tags_in_automation' => null,
        'use_tags' => null,
        'insert_reseller_logo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'starts_on' => 'starts_on',
        'per_campaign' => 'per_campaign',
        'per_month' => 'per_month',
        'maximum_contacts' => 'maximum_contacts',
        'lists' => 'lists',
        'users' => 'users',
        'campaign_blueprints' => 'campaign_blueprints',
        'automation_conditions' => 'automation_conditions',
        'use_campaign_blueprints' => 'use_campaign_blueprints',
        'use_ab_split' => 'use_ab_split',
        'use_automation_conditions' => 'use_automation_conditions',
        'use_automation_customwebhooks' => 'use_automation_customwebhooks',
        'use_html_editor' => 'use_html_editor',
        'use_contact_export' => 'use_contact_export',
        'use_custom_merge_tags' => 'use_custom_merge_tags',
        'use_list_redirection' => 'use_list_redirection',
        'use_behavioral_segmentation' => 'use_behavioral_segmentation',
        'use_smart_email_resource' => 'use_smart_email_resource',
        'use_smart_blueprint' => 'use_smart_blueprint',
        'use_brand' => 'use_brand',
        'use_tags_in_automation' => 'use_tags_in_automation',
        'use_tags' => 'use_tags',
        'insert_reseller_logo' => 'insert_reseller_logo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'starts_on' => 'setStartsOn',
        'per_campaign' => 'setPerCampaign',
        'per_month' => 'setPerMonth',
        'maximum_contacts' => 'setMaximumContacts',
        'lists' => 'setLists',
        'users' => 'setUsers',
        'campaign_blueprints' => 'setCampaignBlueprints',
        'automation_conditions' => 'setAutomationConditions',
        'use_campaign_blueprints' => 'setUseCampaignBlueprints',
        'use_ab_split' => 'setUseAbSplit',
        'use_automation_conditions' => 'setUseAutomationConditions',
        'use_automation_customwebhooks' => 'setUseAutomationCustomwebhooks',
        'use_html_editor' => 'setUseHtmlEditor',
        'use_contact_export' => 'setUseContactExport',
        'use_custom_merge_tags' => 'setUseCustomMergeTags',
        'use_list_redirection' => 'setUseListRedirection',
        'use_behavioral_segmentation' => 'setUseBehavioralSegmentation',
        'use_smart_email_resource' => 'setUseSmartEmailResource',
        'use_smart_blueprint' => 'setUseSmartBlueprint',
        'use_brand' => 'setUseBrand',
        'use_tags_in_automation' => 'setUseTagsInAutomation',
        'use_tags' => 'setUseTags',
        'insert_reseller_logo' => 'setInsertResellerLogo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'starts_on' => 'getStartsOn',
        'per_campaign' => 'getPerCampaign',
        'per_month' => 'getPerMonth',
        'maximum_contacts' => 'getMaximumContacts',
        'lists' => 'getLists',
        'users' => 'getUsers',
        'campaign_blueprints' => 'getCampaignBlueprints',
        'automation_conditions' => 'getAutomationConditions',
        'use_campaign_blueprints' => 'getUseCampaignBlueprints',
        'use_ab_split' => 'getUseAbSplit',
        'use_automation_conditions' => 'getUseAutomationConditions',
        'use_automation_customwebhooks' => 'getUseAutomationCustomwebhooks',
        'use_html_editor' => 'getUseHtmlEditor',
        'use_contact_export' => 'getUseContactExport',
        'use_custom_merge_tags' => 'getUseCustomMergeTags',
        'use_list_redirection' => 'getUseListRedirection',
        'use_behavioral_segmentation' => 'getUseBehavioralSegmentation',
        'use_smart_email_resource' => 'getUseSmartEmailResource',
        'use_smart_blueprint' => 'getUseSmartBlueprint',
        'use_brand' => 'getUseBrand',
        'use_tags_in_automation' => 'getUseTagsInAutomation',
        'use_tags' => 'getUseTags',
        'insert_reseller_logo' => 'getInsertResellerLogo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['starts_on'] = $data['starts_on'] ?? null;
        $this->container['per_campaign'] = $data['per_campaign'] ?? null;
        $this->container['per_month'] = $data['per_month'] ?? null;
        $this->container['maximum_contacts'] = $data['maximum_contacts'] ?? null;
        $this->container['lists'] = $data['lists'] ?? null;
        $this->container['users'] = $data['users'] ?? null;
        $this->container['campaign_blueprints'] = $data['campaign_blueprints'] ?? null;
        $this->container['automation_conditions'] = $data['automation_conditions'] ?? null;
        $this->container['use_campaign_blueprints'] = $data['use_campaign_blueprints'] ?? null;
        $this->container['use_ab_split'] = $data['use_ab_split'] ?? null;
        $this->container['use_automation_conditions'] = $data['use_automation_conditions'] ?? null;
        $this->container['use_automation_customwebhooks'] = $data['use_automation_customwebhooks'] ?? null;
        $this->container['use_html_editor'] = $data['use_html_editor'] ?? null;
        $this->container['use_contact_export'] = $data['use_contact_export'] ?? null;
        $this->container['use_custom_merge_tags'] = $data['use_custom_merge_tags'] ?? null;
        $this->container['use_list_redirection'] = $data['use_list_redirection'] ?? null;
        $this->container['use_behavioral_segmentation'] = $data['use_behavioral_segmentation'] ?? null;
        $this->container['use_smart_email_resource'] = $data['use_smart_email_resource'] ?? null;
        $this->container['use_smart_blueprint'] = $data['use_smart_blueprint'] ?? null;
        $this->container['use_brand'] = $data['use_brand'] ?? null;
        $this->container['use_tags_in_automation'] = $data['use_tags_in_automation'] ?? null;
        $this->container['use_tags'] = $data['use_tags'] ?? null;
        $this->container['insert_reseller_logo'] = $data['insert_reseller_logo'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets starts_on
     *
     * @return int|null
     */
    public function getStartsOn()
    {
        return $this->container['starts_on'];
    }

    /**
     * Sets starts_on
     *
     * @param int|null $starts_on starts_on
     *
     * @return self
     */
    public function setStartsOn($starts_on)
    {
        $this->container['starts_on'] = $starts_on;

        return $this;
    }

    /**
     * Gets per_campaign
     *
     * @return int|null
     */
    public function getPerCampaign()
    {
        return $this->container['per_campaign'];
    }

    /**
     * Sets per_campaign
     *
     * @param int|null $per_campaign per_campaign
     *
     * @return self
     */
    public function setPerCampaign($per_campaign)
    {
        $this->container['per_campaign'] = $per_campaign;

        return $this;
    }

    /**
     * Gets per_month
     *
     * @return int|null
     */
    public function getPerMonth()
    {
        return $this->container['per_month'];
    }

    /**
     * Sets per_month
     *
     * @param int|null $per_month per_month
     *
     * @return self
     */
    public function setPerMonth($per_month)
    {
        $this->container['per_month'] = $per_month;

        return $this;
    }

    /**
     * Gets maximum_contacts
     *
     * @return int|null
     */
    public function getMaximumContacts()
    {
        return $this->container['maximum_contacts'];
    }

    /**
     * Sets maximum_contacts
     *
     * @param int|null $maximum_contacts maximum_contacts
     *
     * @return self
     */
    public function setMaximumContacts($maximum_contacts)
    {
        $this->container['maximum_contacts'] = $maximum_contacts;

        return $this;
    }

    /**
     * Gets lists
     *
     * @return int|null
     */
    public function getLists()
    {
        return $this->container['lists'];
    }

    /**
     * Sets lists
     *
     * @param int|null $lists lists
     *
     * @return self
     */
    public function setLists($lists)
    {
        $this->container['lists'] = $lists;

        return $this;
    }

    /**
     * Gets users
     *
     * @return int|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param int|null $users users
     *
     * @return self
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets campaign_blueprints
     *
     * @return int|null
     */
    public function getCampaignBlueprints()
    {
        return $this->container['campaign_blueprints'];
    }

    /**
     * Sets campaign_blueprints
     *
     * @param int|null $campaign_blueprints campaign_blueprints
     *
     * @return self
     */
    public function setCampaignBlueprints($campaign_blueprints)
    {
        $this->container['campaign_blueprints'] = $campaign_blueprints;

        return $this;
    }

    /**
     * Gets automation_conditions
     *
     * @return int|null
     */
    public function getAutomationConditions()
    {
        return $this->container['automation_conditions'];
    }

    /**
     * Sets automation_conditions
     *
     * @param int|null $automation_conditions automation_conditions
     *
     * @return self
     */
    public function setAutomationConditions($automation_conditions)
    {
        $this->container['automation_conditions'] = $automation_conditions;

        return $this;
    }

    /**
     * Gets use_campaign_blueprints
     *
     * @return bool|null
     */
    public function getUseCampaignBlueprints()
    {
        return $this->container['use_campaign_blueprints'];
    }

    /**
     * Sets use_campaign_blueprints
     *
     * @param bool|null $use_campaign_blueprints use_campaign_blueprints
     *
     * @return self
     */
    public function setUseCampaignBlueprints($use_campaign_blueprints)
    {
        $this->container['use_campaign_blueprints'] = $use_campaign_blueprints;

        return $this;
    }

    /**
     * Gets use_ab_split
     *
     * @return bool|null
     */
    public function getUseAbSplit()
    {
        return $this->container['use_ab_split'];
    }

    /**
     * Sets use_ab_split
     *
     * @param bool|null $use_ab_split use_ab_split
     *
     * @return self
     */
    public function setUseAbSplit($use_ab_split)
    {
        $this->container['use_ab_split'] = $use_ab_split;

        return $this;
    }

    /**
     * Gets use_automation_conditions
     *
     * @return bool|null
     */
    public function getUseAutomationConditions()
    {
        return $this->container['use_automation_conditions'];
    }

    /**
     * Sets use_automation_conditions
     *
     * @param bool|null $use_automation_conditions use_automation_conditions
     *
     * @return self
     */
    public function setUseAutomationConditions($use_automation_conditions)
    {
        $this->container['use_automation_conditions'] = $use_automation_conditions;

        return $this;
    }

    /**
     * Gets use_automation_customwebhooks
     *
     * @return bool|null
     */
    public function getUseAutomationCustomwebhooks()
    {
        return $this->container['use_automation_customwebhooks'];
    }

    /**
     * Sets use_automation_customwebhooks
     *
     * @param bool|null $use_automation_customwebhooks use_automation_customwebhooks
     *
     * @return self
     */
    public function setUseAutomationCustomwebhooks($use_automation_customwebhooks)
    {
        $this->container['use_automation_customwebhooks'] = $use_automation_customwebhooks;

        return $this;
    }

    /**
     * Gets use_html_editor
     *
     * @return bool|null
     */
    public function getUseHtmlEditor()
    {
        return $this->container['use_html_editor'];
    }

    /**
     * Sets use_html_editor
     *
     * @param bool|null $use_html_editor use_html_editor
     *
     * @return self
     */
    public function setUseHtmlEditor($use_html_editor)
    {
        $this->container['use_html_editor'] = $use_html_editor;

        return $this;
    }

    /**
     * Gets use_contact_export
     *
     * @return bool|null
     */
    public function getUseContactExport()
    {
        return $this->container['use_contact_export'];
    }

    /**
     * Sets use_contact_export
     *
     * @param bool|null $use_contact_export use_contact_export
     *
     * @return self
     */
    public function setUseContactExport($use_contact_export)
    {
        $this->container['use_contact_export'] = $use_contact_export;

        return $this;
    }

    /**
     * Gets use_custom_merge_tags
     *
     * @return bool|null
     */
    public function getUseCustomMergeTags()
    {
        return $this->container['use_custom_merge_tags'];
    }

    /**
     * Sets use_custom_merge_tags
     *
     * @param bool|null $use_custom_merge_tags use_custom_merge_tags
     *
     * @return self
     */
    public function setUseCustomMergeTags($use_custom_merge_tags)
    {
        $this->container['use_custom_merge_tags'] = $use_custom_merge_tags;

        return $this;
    }

    /**
     * Gets use_list_redirection
     *
     * @return bool|null
     */
    public function getUseListRedirection()
    {
        return $this->container['use_list_redirection'];
    }

    /**
     * Sets use_list_redirection
     *
     * @param bool|null $use_list_redirection use_list_redirection
     *
     * @return self
     */
    public function setUseListRedirection($use_list_redirection)
    {
        $this->container['use_list_redirection'] = $use_list_redirection;

        return $this;
    }

    /**
     * Gets use_behavioral_segmentation
     *
     * @return bool|null
     */
    public function getUseBehavioralSegmentation()
    {
        return $this->container['use_behavioral_segmentation'];
    }

    /**
     * Sets use_behavioral_segmentation
     *
     * @param bool|null $use_behavioral_segmentation use_behavioral_segmentation
     *
     * @return self
     */
    public function setUseBehavioralSegmentation($use_behavioral_segmentation)
    {
        $this->container['use_behavioral_segmentation'] = $use_behavioral_segmentation;

        return $this;
    }

    /**
     * Gets use_smart_email_resource
     *
     * @return bool|null
     */
    public function getUseSmartEmailResource()
    {
        return $this->container['use_smart_email_resource'];
    }

    /**
     * Sets use_smart_email_resource
     *
     * @param bool|null $use_smart_email_resource use_smart_email_resource
     *
     * @return self
     */
    public function setUseSmartEmailResource($use_smart_email_resource)
    {
        $this->container['use_smart_email_resource'] = $use_smart_email_resource;

        return $this;
    }

    /**
     * Gets use_smart_blueprint
     *
     * @return bool|null
     */
    public function getUseSmartBlueprint()
    {
        return $this->container['use_smart_blueprint'];
    }

    /**
     * Sets use_smart_blueprint
     *
     * @param bool|null $use_smart_blueprint use_smart_blueprint
     *
     * @return self
     */
    public function setUseSmartBlueprint($use_smart_blueprint)
    {
        $this->container['use_smart_blueprint'] = $use_smart_blueprint;

        return $this;
    }

    /**
     * Gets use_brand
     *
     * @return bool|null
     */
    public function getUseBrand()
    {
        return $this->container['use_brand'];
    }

    /**
     * Sets use_brand
     *
     * @param bool|null $use_brand use_brand
     *
     * @return self
     */
    public function setUseBrand($use_brand)
    {
        $this->container['use_brand'] = $use_brand;

        return $this;
    }

    /**
     * Gets use_tags_in_automation
     *
     * @return bool|null
     */
    public function getUseTagsInAutomation()
    {
        return $this->container['use_tags_in_automation'];
    }

    /**
     * Sets use_tags_in_automation
     *
     * @param bool|null $use_tags_in_automation use_tags_in_automation
     *
     * @return self
     */
    public function setUseTagsInAutomation($use_tags_in_automation)
    {
        $this->container['use_tags_in_automation'] = $use_tags_in_automation;

        return $this;
    }

    /**
     * Gets use_tags
     *
     * @return bool|null
     */
    public function getUseTags()
    {
        return $this->container['use_tags'];
    }

    /**
     * Sets use_tags
     *
     * @param bool|null $use_tags use_tags
     *
     * @return self
     */
    public function setUseTags($use_tags)
    {
        $this->container['use_tags'] = $use_tags;

        return $this;
    }

    /**
     * Gets insert_reseller_logo
     *
     * @return bool|null
     */
    public function getInsertResellerLogo()
    {
        return $this->container['insert_reseller_logo'];
    }

    /**
     * Sets insert_reseller_logo
     *
     * @param bool|null $insert_reseller_logo insert_reseller_logo
     *
     * @return self
     */
    public function setInsertResellerLogo($insert_reseller_logo)
    {
        $this->container['insert_reseller_logo'] = $insert_reseller_logo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


