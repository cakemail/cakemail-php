<?php
/**
 * ContactFullResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Cakemail\Lib
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cakemail API
 *
 * The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.
 *
 * The version of the OpenAPI document: 1.12.17
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cakemail\Lib\Model;

use \ArrayAccess;
use \Cakemail\Lib\ObjectSerializer;

/**
 * ContactFullResponse Class Doc Comment
 *
 * @category Class
 * @package  Cakemail\Lib
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ContactFullResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContactFullResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'email' => 'string',
        'status' => 'string',
        'subscribed_on' => 'int',
        'last_bounce_type' => 'string',
        'bounces_count' => 'int',
        'custom_attributes' => '\Cakemail\Lib\Model\CustomAttributesDataResponse[]',
        'tags' => 'string[]',
        'interests' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'email' => null,
        'status' => null,
        'subscribed_on' => null,
        'last_bounce_type' => null,
        'bounces_count' => null,
        'custom_attributes' => null,
        'tags' => null,
        'interests' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'email' => 'email',
        'status' => 'status',
        'subscribed_on' => 'subscribed_on',
        'last_bounce_type' => 'last_bounce_type',
        'bounces_count' => 'bounces_count',
        'custom_attributes' => 'custom_attributes',
        'tags' => 'tags',
        'interests' => 'interests'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'email' => 'setEmail',
        'status' => 'setStatus',
        'subscribed_on' => 'setSubscribedOn',
        'last_bounce_type' => 'setLastBounceType',
        'bounces_count' => 'setBouncesCount',
        'custom_attributes' => 'setCustomAttributes',
        'tags' => 'setTags',
        'interests' => 'setInterests'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'email' => 'getEmail',
        'status' => 'getStatus',
        'subscribed_on' => 'getSubscribedOn',
        'last_bounce_type' => 'getLastBounceType',
        'bounces_count' => 'getBouncesCount',
        'custom_attributes' => 'getCustomAttributes',
        'tags' => 'getTags',
        'interests' => 'getInterests'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['subscribed_on'] = $data['subscribed_on'] ?? null;
        $this->container['last_bounce_type'] = $data['last_bounce_type'] ?? null;
        $this->container['bounces_count'] = $data['bounces_count'] ?? null;
        $this->container['custom_attributes'] = $data['custom_attributes'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['interests'] = $data['interests'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['subscribed_on'] === null) {
            $invalidProperties[] = "'subscribed_on' can't be null";
        }
        if ($this->container['last_bounce_type'] === null) {
            $invalidProperties[] = "'last_bounce_type' can't be null";
        }
        if ($this->container['bounces_count'] === null) {
            $invalidProperties[] = "'bounces_count' can't be null";
        }
        if ($this->container['custom_attributes'] === null) {
            $invalidProperties[] = "'custom_attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subscribed_on
     *
     * @return int
     */
    public function getSubscribedOn()
    {
        return $this->container['subscribed_on'];
    }

    /**
     * Sets subscribed_on
     *
     * @param int $subscribed_on subscribed_on
     *
     * @return self
     */
    public function setSubscribedOn($subscribed_on)
    {
        $this->container['subscribed_on'] = $subscribed_on;

        return $this;
    }

    /**
     * Gets last_bounce_type
     *
     * @return string
     */
    public function getLastBounceType()
    {
        return $this->container['last_bounce_type'];
    }

    /**
     * Sets last_bounce_type
     *
     * @param string $last_bounce_type last_bounce_type
     *
     * @return self
     */
    public function setLastBounceType($last_bounce_type)
    {
        $this->container['last_bounce_type'] = $last_bounce_type;

        return $this;
    }

    /**
     * Gets bounces_count
     *
     * @return int
     */
    public function getBouncesCount()
    {
        return $this->container['bounces_count'];
    }

    /**
     * Sets bounces_count
     *
     * @param int $bounces_count bounces_count
     *
     * @return self
     */
    public function setBouncesCount($bounces_count)
    {
        $this->container['bounces_count'] = $bounces_count;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \Cakemail\Lib\Model\CustomAttributesDataResponse[]
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \Cakemail\Lib\Model\CustomAttributesDataResponse[] $custom_attributes custom_attributes
     *
     * @return self
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets interests
     *
     * @return string[]|null
     */
    public function getInterests()
    {
        return $this->container['interests'];
    }

    /**
     * Sets interests
     *
     * @param string[]|null $interests interests
     *
     * @return self
     */
    public function setInterests($interests)
    {
        $this->container['interests'] = $interests;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


